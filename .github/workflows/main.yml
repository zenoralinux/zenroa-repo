name: Update Repo Databases

on:
  workflow_dispatch:
  schedule:
    - cron: "30 3 * * *"

permissions:
  contents: write

concurrency:
  group: update-repo-dbs
  cancel-in-progress: false

jobs:
  update-db:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest

    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    env:
      REPO_NAME: "zrepo"
      ARCH_DIR: ${{ matrix.arch }}

    steps:
      - name: Install required tools
        run: |
          pacman -Syu --noconfirm --needed pacman-contrib libarchive curl jq

      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Download packages from release
        id: download
        run: |
          mkdir -p "repo/$ARCH_DIR"
          cd "repo/$ARCH_DIR"
          
          echo "Checking release for $ARCH_DIR..."
          api_url="https://api.github.com/repos/${{ github.repository }}/releases/tags/$ARCH_DIR"
          response=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$api_url")
          
          # Debug: Show response
          echo "API Response:"
          echo "$response" | jq .
          
          # Get package assets
          assets=$(echo "$response" | jq -r '.assets[] | select(.name | test("\\.pkg\\.tar\\.(zst|xz|gz)$")) | .url')
          
          if [ -z "$assets" ]; then
            echo "::warning::No package assets found in release for $ARCH_DIR"
            echo "has_packages=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found packages:"
          echo "$assets"
          
          for asset_url in $assets; do
            echo "Downloading $asset_url"
            curl -sLH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/octet-stream" \
                 "$asset_url" -O
          done
          
          echo "has_packages=true" >> $GITHUB_OUTPUT

      - name: Build pacman database
        if: steps.download.outputs.has_packages == 'true'
        run: |
          set -euo pipefail
          cd "repo/$ARCH_DIR"
          echo "Current directory contents:"
          ls -la

          # Remove existing db files if any
          rm -f "$REPO_NAME".db* "$REPO_NAME".files*

          # Get all package files
          shopt -s nullglob
          pkgs=( *.pkg.tar.* )
          echo "Found packages: ${pkgs[@]}"

          if [ ${#pkgs[@]} -eq 0 ]; then
            echo "::error::No package files found in repo/$ARCH_DIR"
            exit 1
          fi

          # Create new database
          repo-add -n -R "$REPO_NAME".db.tar.gz "${pkgs[@]}"

          # Rename files to expected format
          mv -fv "$REPO_NAME".db.tar.gz "$REPO_NAME".db
          mv -fv "$REPO_NAME".files.tar.gz "$REPO_NAME".files

          echo "Final directory contents:"
          ls -la

      - name: Upload database files
        if: steps.download.outputs.has_packages == 'true'
        run: |
          cd "repo/$ARCH_DIR"
          echo "Files to upload:"
          ls -lh
          
          # Get release ID
          release_id=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$ARCH_DIR" | \
            jq -r '.id')
          echo "Release ID: $release_id"
          
          # Upload each file
          for file in "$REPO_NAME.db" "$REPO_NAME.files"; do
            echo "Uploading $file..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename $file)"
            
            # Verify upload
            echo "Verifying upload..."
            curl -I "https://github.com/${{ github.repository }}/releases/download/$ARCH_DIR/$(basename $file)"
          done
